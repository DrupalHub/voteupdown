<?php
/**
 * @file
 * vote_up_down.module
 */

define('VOTE_UP_DOWN_WIDGET_MESSAGE_ERROR', 0);
define('VOTE_UP_DOWN_WIDGET_MESSAGE_DENIED', 1);

define('vote_up_down_REQUIRED_CTOOLS_API', '2.0-alpha');

/**
 * Implements hook_menu().
 */
function vote_up_down_menu() {
  $items = array();

  $items['vote/%/%/%/%/%/%'] = array(
    'title' => 'Vote',
    'page callback' => 'vote_up_down_vote',
    'page arguments' => array(1, 2, 3, 4, 5, 6),
    'access callback' => 'vote_up_down_access_callback',
    'access arguments' => array('use vote up/down', 1, 2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  $items['votereset/%/%/%/%/%'] = array(
    'title' => 'Reset vote',
    'page callback' => 'vote_up_down_reset',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => 'vote_up_down_access_callback',
    'access arguments' => array('reset vote up/down votes', 1, 2, 3, 4),
    'type'             => MENU_CALLBACK,
  );

  $items['vote_up_down/%ctools_js/denied/%'] = array(
    'title' => 'Vote denied',
    'page callback' => 'vote_up_down_denied_vote',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function vote_up_down_permission() {
  return array(
    'use vote up/down' => array(
      'title' => t('Use Vote Up/Down'),
      'description' => t('Grant users the ability to cast votes'),
    ),
    'administer vote up/down' => array(
      'title' => t('Administer Vote Up/Down'),
      'description' => t('Adjust the settings of the Vote Up/Down module'),
    ),
    'access vote up/down statistics' => array(
      'title' => t('Access Vote Up/Down Statistics'),
      'description' => t('Permission to see who is voting on what'),
    ),
    'reset vote up/down votes' => array(
      'title' => t('Reset Votes'),
      'description' => t('Reset all of the Up/Down votes on the site'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function vote_up_down_field_info() {
  $field_info['vote_up_down'] = array(
    'label' => t('Vote up down'),
    'description' => t('Supply voting widgets for entity.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'updown',
    'default_formatter' => 'updown',
  );

  return $field_info;
}

/**
 * Implements hook_field_widget_info().
 */
function vote_up_down_field_widget_info() {
  ctools_include('plugins');
  $widgets = ctools_get_plugins('vote_up_down', 'widgets');

  foreach ($widgets as $widget => $info) {
    $widgets[$widget] = array(
      'label' => $info['title'],
      'description' => $info['description'],
      'field types' => array('vote_up_down'),
      'settings' => array(),
    );
  }

  return $widgets;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function vote_up_down_field_formatter_info() {
  return array(
    'vote_up_down' => array(
      'label' => t('Vote up down'),
      'field types' => array('vote_up_down'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Declaring themes for plugins.
 */
function vote_up_down_theme() {
  ctools_include('plugins');
  $widgets = ctools_get_plugins('vote_up_down', 'widgets');

  $theme = array();

  foreach ($widgets as $widget => $info) {
    $theme['vote_up_down_' . $widget] = array(
      'template' => 'widget',
      'path' => $info['path'],
      'preprocess functions' => array('vote_up_down_widget_preprocess'),
      'variables' => array(
        'widget' => $widget,
        'entity_id' => NULL,
        'entity_type' => NULL,
      ),
    );
  }

  return $theme;
}

/**
 * Access callback for votes.
 *
 * @param $permission
 *  A string containing the permission required to modify the vote.
 * @param $entity_type
 *  A string containing the type of content being voted on.
 * @param $entity_id
 *  An integer containing the unique ID of the content being voted on.
 * @param $value
 *  An integer containing the vote value, 1 for an up vote, -1 for a down vote.
 * @param $tag
 *  A string containing the voting API tag.
 * @param $account
 *  An object containing the user voting on the content, NULL for the current
 *  user.
 *
 * @return bool
 *  Boolean flagging whether or not the user has access to the vote.
 */
function vote_up_down_access_callback($permission, $entity_type, $entity_id, $value, $tag, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // Verify the user has the proper permission.
  if (user_access($permission, $account) !== TRUE) {
    return FALSE;
  }

  // Although the user holds the proper permission we should allow other module
  // to interrupt during the access function.
  $access_array = module_invoke_all('vote_up_down_access', $permission, $entity_type, $entity_id, $value, $tag, $account);

  foreach ($access_array as $access_result) {
    if ($access_result !== TRUE) {
      // One of the module didn't allow this action.
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Pre process function callback.
 */
function vote_up_down_widget_preprocess(&$variables) {
  $widget = vote_up_down_load_widget($variables['widget']);

  // Get all the assets.
  $css = $widget->settings['assets']['css'];
  $js = $widget->settings['assets']['js'];

  // Load tje CSS.
  foreach ($css as $asset) {
    drupal_add_css($widget->settings['path'] . '/' . $asset);
  }

  // Loading JS.
  foreach ($js as $asset) {
    drupal_add_js($widget->settings['path'] . '/' . $asset);
  }

  // Adding variables needed in preprocess functions.
  $variables['classes'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $variables['classes_array'] = array();

  // Invoking the pre process of the widget.
  $widget->preprocess($variables);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function vote_up_down_ctools_plugin_api($module, $api) {
  if ($module == 'vote_up_down' && $api == 'widgets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function vote_up_down_ctools_plugin_type() {
  $plugins['widgets'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function vote_up_down_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'vote_up_down' && $plugin_type == 'widgets') {
    return 'plugins/widgets';
  }
}

/**
 * Get the widget class.
 *
 * @param $widget
 *  The name of the widget.
 *
 * @throws Exception
 * @return voteUpDownBase
 */
function vote_up_down_load_widget($widget) {
  $object_cache = drupal_static(__FUNCTION__);

  if (!isset($object_cache[$widget])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('vote_up_down', 'widgets', $widget);
    $class = ctools_plugin_load_class('vote_up_down', 'widgets', $widget, 'class');

    if (!$class) {
      throw new Exception(t('The @widget class id undefined', array('@widget' => $plugin['class'])));
    }

    $object_cache[$widget] = new $class($plugin);
  }

  return $object_cache[$widget];
}

/**
 * Implements hook_field_instance_settings_form().
 */
function vote_up_down_field_instance_settings_form($field, $instance) {
  return vote_up_down_load_widget($instance['widget']['type'])->instanceSettings($instance['settings']);
}

/**
 * Implements hook_field_widget_form().
 */
function vote_up_down_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return vote_up_down_load_widget($instance['widget']['type'])->widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_view().
 */
function vote_up_down_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return vote_up_down_load_widget($instance['widget']['type'])->view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_field_prepare_view().
 */
function vote_up_down_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][0] = $entity;
    }
  }
}

/**
 * Function for the main voting handler with Ajax support.
 */
function vote_up_down_vote($entity_type, $entity_id, $value, $tag, $widget, $token, $ajax = 'ajax') {
  // If the user is anonymous we don't need to check for a token.
  if (!is_numeric($value) || !drupal_valid_token($token, "vote/$entity_type/$entity_id/$value/$tag/$widget", TRUE)) {
    return MENU_ACCESS_DENIED;
  }

  global $user;
  $account = clone $user;
  $tag = $tag ? $tag : variable_get('vote_up_down_tag', 'vote');
  $plugin = vote_up_down_load_widget($widget);

  $vote = array();
  $casted_vote_criteria = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'tag' => $tag,
  ) + votingapi_current_user_identifier();
  $casted_vote = votingapi_select_single_vote_value($casted_vote_criteria);

  // Sanity-check the incoming values.
  if ($value > 0) {
    $value = 1;
  }
  elseif ($value < 0) {
    $value = -1;
  }
  else {
    // Invalid value.
    $params = array(
      '@type' => $entity_type,
      '@content_id' => $entity_id,
      '@value' => $value,
      '@tag' => $tag,
      '@token' => $token,
    );
    watchdog('vote_up_down', 'Invalid vote on @type @content_id, with value @value, tag @tag and token @token', $params);
    return;
  }

  // The validate above has passed but let's allow the plugin handler join in.
  $plugin->validate($entity_type, $entity_id, $value, $account);

  $vote['value'] = $value;
  $vote['value_type'] = 'points';
  $vote['tag'] = $tag;
  $vote['entity_id'] = $entity_id;
  $vote['entity_type'] = $entity_type;
  $votes = array(0 => $vote);
  drupal_alter('vote_up_down_votes', $votes);

  // Do not allow to vote with the same value.
  if ($casted_vote == $votes[0]['value']) {
    return;
  }

  votingapi_set_votes($votes);

  // AJAX is disabled.
  if ($ajax != 'ajax') {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  $commands = array();

  $theme = theme('vote_up_down_' . $plugin->settings['name'], array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
  ));
  $commands[] = ajax_command_replace("#widget-$entity_type-$entity_id", $theme);

  // todo: Do we need this?
//  if (!empty($plugin['votes template'])) {
//    $commands[] = ajax_command_replace("#votes-$type-$entity_id", theme('vote_up_down_votes', $variables));
//  }

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_entity_load().
 *
 * Prepopulating the vote up down field with the information from the votingAPI
 * table.
 */
function vote_up_down_entity_load($entities, $type) {
  // Check if the entity has the vote up down field attached.
  if ($statement) {
    // ACT.
  }

  // Load all the vote from the DB.

  // Populate the field.
}