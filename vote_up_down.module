<?php
/**
 * @file
 * vote_up_down.module
 */

/**
 * Defines. Traces of the 7.x-1.x branch.
 */
define('VOTE_UP_DOWN_WIDGET_MESSAGE_ERROR', 0);
define('VOTE_UP_DOWN_WIDGET_MESSAGE_DENIED', 1);
define('vote_up_down_REQUIRED_CTOOLS_API', '2.0-alpha');

// Require files.
require_once 'includes/vote_up_down.class.inc';
require_once 'includes/voteUpDown.php';
require_once 'includes/vote_up_down_basic.class.inc';

/**
 * Implements hook_menu().
 */
function vote_up_down_menu() {
  $items = array();

  $items['vote/%/%/%/%/%/%'] = array(
    'title' => 'Vote',
    'page callback' => 'vote_up_down_vote',
    'page arguments' => array(1, 2, 3, 4, 5, 6),
    'access callback' => 'vote_up_down_access_callback',
    'access arguments' => array('use vote up/down', 1, 2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  $items['votereset/%/%/%/%/%'] = array(
    'title' => 'Reset vote',
    'page callback' => 'vote_up_down_reset',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => 'vote_up_down_access_callback',
    'access arguments' => array('reset vote up/down votes', 1, 2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  $items['vote_up_down/%ctools_js/denied/%'] = array(
    'title' => 'Vote denied',
    'page callback' => 'vote_up_down_denied_vote',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['vote_up_down/users-autocomplete'] = array(
    'title' => 'Users autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('administer vote up/down'),
    'page callback' => 'vote_up_down_users_autocomplete',
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function vote_up_down_permission() {
  return array(
    'use vote up/down' => array(
      'title' => t('Use Vote Up/Down'),
      'description' => t('Grant users the ability to cast votes'),
    ),
    'administer vote up/down' => array(
      'title' => t('Administer Vote Up/Down'),
      'description' => t('Adjust the settings of the Vote Up/Down module'),
    ),
    'access vote up/down statistics' => array(
      'title' => t('Access Vote Up/Down Statistics'),
      'description' => t('Permission to see who is voting on what'),
    ),
    'reset vote up/down votes' => array(
      'title' => t('Reset Votes'),
      'description' => t('Reset all of the Up/Down votes on the site'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function vote_up_down_field_info() {
  $field_info['vote_up_down'] = array(
    'label' => t('Vote up down'),
    'description' => t('Supply voting widgets for entity.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'updown',
    'default_formatter' => 'updown',
    'property_callbacks' => array('vote_up_down_property_callback'),
  );

  return $field_info;
}

/**
 * Implements hook_field_widget_info().
 */
function vote_up_down_field_widget_info() {
  $widgets = VoteUpDown::getWidgets();

  foreach ($widgets as $widget => $info) {
    $widgets[$widget] = array(
      'label' => $info['title'],
      'description' => $info['description'],
      'field types' => array('vote_up_down'),
      'settings' => array(),
    );
  }

  return $widgets;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function vote_up_down_field_formatter_info() {
  return array(
    'vote_up_down' => array(
      'label' => t('Vote up down'),
      'field types' => array('vote_up_down'),
    ),
  );
}

/**
 * Property callback; Define setter and callback function.
 */
function vote_up_down_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'vote_up_down_getter_callback';
  $property['setter callback'] = 'vote_up_down_setter_callback';
  $property['validation callback'] = 'vote_up_down_validation_callback';
  $property['type'] = 'unknown';
}

/**
 * Getter callback;
 */
function vote_up_down_getter_callback($entity, array $options, $name, $entity_type, &$context) {
  return new VoteUpDown($entity_type, $entity);
}

/**
 * Setter callback;
 */
function vote_up_down_setter_callback($entity, $name, $items, $langcode, $entity_type) {
  $field_info = field_info_field($name);

  if ($field_info['cardinality'] == 1) {
    if (is_array($items)) {
      throw new Exception(t('Multiple votes has injected to the vote up down field when the field support a single vote.'));
    }

    // Set up the single as an array. This will allow to use a foreach even for
    // a single value.
    $items = array($items);
  }

  // Load all the votes for the entity and verify the vote ID exists for this
  // entity.
  $votes = VoteUpDown::getResults($entity_type, $entity);

  if ($extras = array_diff($items, array_keys($votes))) {
    $params = array(
      '@ids' => implode(', ', $extras),
      '@id' => reset($extras),
    );

    if (count($extras) == 1) {
      $text = 'The vote id @id is not belong to the entity';
    }
    else {
      $text = 'The votes IDs you entered are belong to this entity: @ids.';
    }

    throw new Exception(t($text, $params));
  }

  // Loop over the items and relate it to the key.
  $data = array();
  foreach ($items as $item) {
    $data[]['voteid'] = $item;
  }

  $entity->{$name}[$langcode] = $data;
}

/**
 * Validation callback; The validation will be done in the setter callback when
 * more context is available: cardinality of the field, voting ID etc. etc.
 */
function vote_up_down_validation_callback() {
  return TRUE;
}

/**
 * Implements hook_theme().
 *
 * Declaring themes for plugins.
 */
function vote_up_down_theme() {
  $widgets = VoteUpDown::getWidgets();

  $theme = array();

  foreach ($widgets as $widget => $info) {
    $theme['vote_up_down_' . $widget] = array(
      'template' => 'widget',
      'path' => $info['path'],
      'preprocess functions' => array('vote_up_down_widget_preprocess'),
      'variables' => array(
        'widget' => $widget,
        'entity_id' => NULL,
        'entity_type' => NULL,
      ),
    );
  }

  return $theme;
}

/**
 * Access callback for votes.
 *
 * @param $permission
 *  A string containing the permission required to modify the vote.
 * @param $entity_type
 *  A string containing the type of content being voted on.
 * @param $entity_id
 *  An integer containing the unique ID of the content being voted on.
 * @param $value
 *  An integer containing the vote value, 1 for an up vote, -1 for a down vote.
 * @param $tag
 *  A string containing the voting API tag.
 * @param $account
 *  An object containing the user voting on the content, NULL for the current
 *  user.
 *
 * @return bool
 *  Boolean flagging whether or not the user has access to the vote.
 */
function vote_up_down_access_callback($permission, $entity_type, $entity_id, $value, $tag, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // Verify the user has the proper permission.
  if (user_access($permission, $account) !== TRUE) {
    return FALSE;
  }

  // Although the user holds the proper permission we should allow other module
  // to interrupt during the access function.
  $access_array = module_invoke_all('vote_up_down_access', $permission, $entity_type, $entity_id, $value, $tag, $account);

  foreach ($access_array as $access_result) {
    if ($access_result !== TRUE) {
      // One of the module didn't allow this action.
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Pre process function callback.
 */
function vote_up_down_widget_preprocess(&$variables) {
  $widget = vote_up_down_load_widget($variables['widget']);

  // Get all the assets.
  $css = empty($widget->settings['assets']['css']) ? '' : $widget->settings['assets']['css'];
  $js = empty($widget->settings['assets']['js']) ? '' : $widget->settings['assets']['js'];

  // Load tje CSS.
  if ($css) {
    foreach ($widget->settings['assets']['css'] as $asset) {
      drupal_add_css($widget->settings['path'] . '/' . $asset);
    }
  }

  // Loading JS.
  if ($js) {
    foreach ($widget->settings['assets']['js'] as $asset) {
      drupal_add_js($widget->settings['path'] . '/' . $asset);
    }
  }

  // Adding variables needed in preprocess functions.
  $variables['classes'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $variables['classes_array'] = array();

  // Invoking the pre process of the widget.
  $widget->preprocess($variables);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function vote_up_down_ctools_plugin_api($module, $api) {
  if ($module == 'vote_up_down' && $api == 'widgets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function vote_up_down_ctools_plugin_type() {
  $plugins['widgets'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function vote_up_down_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'vote_up_down' && $plugin_type == 'widgets') {
    return 'plugins/widgets';
  }
}

/**
 * Get the widget class.
 *
 * @param $widget
 *  The name of the widget.
 *
 * @throws Exception
 * @return voteUpDownBase
 */
function vote_up_down_load_widget($widget) {
  $object_cache = drupal_static(__FUNCTION__);

  if (!isset($object_cache[$widget])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('vote_up_down', 'widgets', $widget);
    $class = ctools_plugin_load_class('vote_up_down', 'widgets', $widget, 'class');

    if (!$class) {
      throw new Exception(t('The @widget class id undefined', array('@widget' => $plugin['class'])));
    }

    $object_cache[$widget] = new $class($plugin);
  }

  return $object_cache[$widget];
}

/**
 * Implements hook_field_instance_settings_form().
 */
function vote_up_down_field_instance_settings_form($field, $instance) {
  return vote_up_down_load_widget($instance['widget']['type'])->instanceSettings($instance['settings']);
}

/**
 * Implements hook_field_widget_form().
 */
function vote_up_down_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return vote_up_down_load_widget($instance['widget']['type'])->widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_view().
 */
function vote_up_down_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return vote_up_down_load_widget($instance['widget']['type'])->view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_field_prepare_view().
 */
function vote_up_down_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][0] = $entity;
    }
  }
}

/**
 * Function for the main voting handler with Ajax support.
 */
function vote_up_down_vote($entity_type, $entity_id, $value, $tag, $widget, $token, $ajax = 'ajax') {
  // If the user is anonymous we don't need to check for a token.
  if (!is_numeric($value) || !drupal_valid_token($token, "vote/$entity_type/$entity_id/$value/$tag/$widget", TRUE)) {
    return MENU_ACCESS_DENIED;
  }

  global $user;
  $account = clone $user;
  $tag = $tag ? $tag : variable_get('vote_up_down_tag', 'vote');
  $plugin = vote_up_down_load_widget($widget);

  $vote = array();
  $casted_vote_criteria = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'tag' => $tag,
  ) + votingapi_current_user_identifier();
  $casted_vote = votingapi_select_single_vote_value($casted_vote_criteria);

  // Sanity-check the incoming values.
  if ($value > 0) {
    $value = 1;
  }
  elseif ($value < 0) {
    $value = -1;
  }
  else {
    // Invalid value.
    $params = array(
      '@type' => $entity_type,
      '@content_id' => $entity_id,
      '@value' => $value,
      '@tag' => $tag,
      '@token' => $token,
    );
    watchdog('vote_up_down', 'Invalid vote on @type @content_id, with value @value, tag @tag and token @token', $params);
    return;
  }

  // The validate above has passed but let's allow the plugin handler join in.
  $plugin->validate($entity_type, $entity_id, $value, $account);

  $vote['value'] = $value;
  $vote['value_type'] = 'points';
  $vote['tag'] = $tag;
  $vote['entity_id'] = $entity_id;
  $vote['entity_type'] = $entity_type;
  $votes = array(0 => $vote);
  drupal_alter('vote_up_down_votes', $votes);

  // Do not allow to vote with the same value.
  if ($casted_vote == $votes[0]['value']) {
    return;
  }

  votingapi_set_votes($votes);

  // AJAX is disabled.
  if ($ajax != 'ajax') {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  $theme = theme('vote_up_down_' . $plugin->settings['name'], array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
  ));
  $commands = array(ajax_command_replace("#widget-$entity_type-$entity_id", $theme));

  print ajax_render($commands);
  exit;
}

/**
 * Menu callback; Reset the vote status for this action.
 */
function vote_up_down_reset($entity_type, $entity_id, $tag, $widget, $token, $ajax = 'ajax') {
  if (!drupal_valid_token($token, "votereset/$entity_type/$entity_id/$tag/$widget", TRUE)) {
    $params = array('@type' => $entity_type, '@entity_id' => $entity_id, '@tag' => $tag, '@token' => $token);
    watchdog('vud', t('Could not reset votes on @type @entity_id, tag @tag and token @token', $params));
    drupal_set_message(t('Oops! There was an error resetting your vote!'), 'warning');
    return;
  }

  $plugin = vote_up_down_load_widget($widget);

  $criteria = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'tag' => $tag,
  ) + votingapi_current_user_identifier();
  votingapi_delete_votes(votingapi_select_votes($criteria));
  votingapi_recalculate_results($entity_type, $entity_id);

  // AJAX is disabled.
  if ($ajax != 'ajax') {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  $theme = theme('vote_up_down_' . $plugin->settings['name'], array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
  ));

  $commands = array(ajax_command_replace("#widget-$entity_type-$entity_id", $theme));

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_votingapi_insert().
 *
 * When a new vote is created set the voting ID in the field of the entity.
 */
function vote_up_down_votingapi_insert($votes) {
  if (variable_get('vote_up_down_skip_entity_update')) {
    // One of the modules notify to skip the update of the entity.
    variable_del('vote_up_down_skip_entity_update');
    return;
  }

  foreach ($votes as $vote) {
    $wrapper = entity_metadata_wrapper($vote['entity_type'], $vote['entity_id']);

    // Get the field name.
    $field_name = VoteUpDown::findField($vote['entity_type'], $vote['entity_id']);

    // Get the field settings to get the cardinality of the field.
    $instance = field_info_instance($wrapper->type(), $field_name, $wrapper->getBundle());
    $field_info = field_info_field($instance['field_name']);

    // Check the field cardinality and set the value as well.
    if ($field_info['cardinality'] == 1) {
      $value = $vote['vote_id'];
    }
    else {
      $values = array_keys($wrapper->{$field_name}->value()->getVotes());
      $values[] = $vote['vote_id'];
      $value = array_unique($values);
    }

    $wrapper->{$field_name}->set($value);
    $wrapper->save();
  }
}

/**
 * Implements hook_field_is_empty().
 */
function vote_up_down_field_is_empty($item, $field) {
  return !empty($item);
}

/**
 * Widget validate; Due to the special widget iv'e created for managing the
 * votes some logic will be needed.
 */
function vote_up_down_widget_validate(&$element, &$form_state, $form) {
  if (!empty($element['#widget'])) {
    // The form was submitted from the widget form. Return early.
    return;
  }

  if ($element['#vote'] === 0) {
    if (!$element['user']['#value'] xor !$element['value']['#value']) {
      form_error($element, t('User name or value is empty.'));
      return;
    }
    else if ($element['user']['#value'] && $element['value']['#value']) {

      // Get the user ID.
      preg_match("/.+\((\d+)\)/", $element['user']['#value'], $matches);
      $uid = $matches[1];

      // This is new vote, verify the user doesn't exists already.
      if (!$user = user_load($uid)) {
        form_error($element['user'], t('The user name does not exists.'));
        return;
      }

      // Verify the user didn't vote before.
      if (VoteUpDown::getVotesForUser($element['#entity_type'], $element['#entity'], $user->uid)) {
        form_error($element['user'], t('The user %name already voted for this entity.', array('%name' => $user->name)));
        return;
      }

      $vote = (object) VoteUpDown::setVote($element['#entity_type'], $element['#entity'], $element['value']['#value'], $user->uid);
    }
  }
  else {
    // When removing the value of the username we need to delete the vote.
    if (empty($element['user']['#value']) || empty($element['value']['#value'])) {
      db_delete('votingapi_vote')
        ->condition('vote_id', $element['#vote']->vote_id)
        ->execute();
      return;
    }

    // Get the user ID.
    preg_match("/.+\((\d+)\)/", $element['user']['#value'], $matches);
    $uid = $matches[1];

    $vote = $element['#vote']->vote_id;

    // Before update, check if there any change in the current vote.
    if ($element['#vote']->uid != $uid || $element['#vote']->value != $element['value']['#value']) {

      // The user already voted for this entity.
      if ($element['#vote']->uid != $uid && VoteUpDown::getVotesForUser($element['#entity_type'], $element['#entity'], $uid)) {
        form_error($element['user'], t('The user %name already voted for this entity.', array('%name' => user_load($uid)->name)));
        return;
      }

      // Update the vote entry and return early because no further work is
      // required.

      VoteUpDown::setVote($element['#entity_type'], $element['#entity'], $element['value']['#value'], $uid, $vote);

      // See documentation below.
      variable_set('vote_up_down_skip_entity_update', TRUE);
      return;
    }
  }

  // Get the vote ID.
  if (!empty($vote->vid)) {
    $vid = $vote->vid;
  }
  else {
    if (empty($vote)) {
      // The vote is empty. Return early.
      return;
    }

    $vid = $vote;
  }

  // When dealing with node and setting the value there is a problem with the
  // time stamp. Notify later on that the node don't need to updated further on.
  // This will deal in the entity pre save.
  variable_set('vote_up_down_skip_entity_update', TRUE);

  // Set the value in the element.
  form_set_value($element, $vid, $form_state);
}

/**
 * Implements hook_entity_presave().
 *
 * Due to the special widget iv'e created for managing the votes some logic will
 * be needed.
 */
function vote_up_down_entity_presave($entity, $type) {
  if (!$field = VoteUpDown::findField($type, $entity)) {
    // The field of the vote up down don't exists. Return early.
    return;
  }

  if (!$votes = array_keys(VoteUpDown::getResults($type, $entity))) {
    // No votes for this entity. Return early.
    return;
  }

  $wrapper = entity_metadata_wrapper($type, $entity);
  $wrapper->{$field}->set($votes);
}

/**
 * Auto complete users.
 */
function vote_up_down_users_autocomplete($string = '') {
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('name', $string, 'CONTAINS')
    ->execute();

  if (empty($results['user'])) {
    return;
  }

  $output = array();

  $users = user_load_multiple(array_keys($results['user']));
  foreach ($users as $user) {
    $output[check_plain($user->name) . ' (' . $user->uid . ')'] = check_plain($user->name);
  }

  drupal_json_output($output);
}