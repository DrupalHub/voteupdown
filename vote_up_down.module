<?php
/**
 * @file
 * vote_up_down.module
 */

/**
 * Implements hook_field_info().
 */
function vote_up_down_field_info() {
  $field_info['vote_up_down'] = array(
    'label' => t('Vote up down'),
    'description' => t('Supply voting widgets for entity.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'updown',
    'default_formatter' => 'updown',
  );

  return $field_info;
}

/**
 * Implements hook_field_widget_info().
 */
function vote_up_down_field_widget_info() {
  ctools_include('plugins');
  $widgets = ctools_get_plugins('vote_up_down', 'widgets');

  foreach ($widgets as $widget => $info) {
    $widgets[$widget] = array(
      'label' => $info['title'],
      'description' => $info['description'],
      'field types' => array('vote_up_down'),
      'settings' => array(),
    );
  }

  return $widgets;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function vote_up_down_field_formatter_info() {
  return array(
    'vote_up_down' => array(
      'label' => t('Vote up down'),
      'field types' => array('vote_up_down'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Declaring themes for plugins.
 */
function vote_up_down_theme() {
  return array();
}

/**
 * Implements hook_ctools_plugin_api().
 */
function vote_up_down_ctools_plugin_api($module, $api) {
  if ($module == 'vote_up_down' && $api == 'widgets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function vote_up_down_ctools_plugin_type() {
  $plugins['widgets'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function vote_up_down_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'vote_up_down' && $plugin_type == 'widgets') {
    return 'plugins/widgets';
  }
}

/**
 * Get the widget class.
 *
 * @param $widget
 *  The name of the widget.
 *
 * @throws Exception
 * @return voteUpDownInterface
 */
function vote_up_down_load_widget($widget) {
  $object_cache = drupal_static(__FUNCTION__);

  if (!isset($object_cache[$widget])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('vote_up_down', 'widgets', $widget);
    $class = ctools_plugin_load_class('vote_up_down', 'widgets', $widget, 'class');

    if (!$class) {
      throw new Exception(t('The @widget class id undefined', array('@widget' => $plugin['class'])));
    }

    $object_cache[$widget] = new $class($plugin);
  }

  return $object_cache[$widget];
}

/**
 * Implements hook_field_instance_settings_form().
 */
function vote_up_down_field_instance_settings_form($field, $instance) {
  return vote_up_down_load_widget($instance['widget']['type'])->instanceSettings($instance['settings']);
}

/**
 * Implements hook_field_widget_form().
 */
function vote_up_down_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return vote_up_down_load_widget($instance['widget']['type'])->widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_view().
 */
function vote_up_down_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return vote_up_down_load_widget($instance['widget']['type'])->view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_field_prepare_view().
 */
function vote_up_down_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][0] = $entity;
    }
  }
}