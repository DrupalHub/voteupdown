<?php
/**
 * @file
 * vote_up_down.module
 */

define('VUD_WIDGET_MESSAGE_ERROR', 0);
define('VUD_WIDGET_MESSAGE_DENIED', 1);

define('VUD_REQUIRED_CTOOLS_API', '2.0-alpha');

/**
 * Implements hook_field_info().
 */
function vote_up_down_field_info() {
  $field_info['vote_up_down'] = array(
    'label' => t('Vote up down'),
    'description' => t('Supply voting widgets for entity.'),
    'settings' => array(),
    'instance_settings' => array(),
    'default_widget' => 'updown',
    'default_formatter' => 'updown',
  );

  return $field_info;
}

/**
 * Implements hook_field_widget_info().
 */
function vote_up_down_field_widget_info() {
  ctools_include('plugins');
  $widgets = ctools_get_plugins('vote_up_down', 'widgets');

  foreach ($widgets as $widget => $info) {
    $widgets[$widget] = array(
      'label' => $info['title'],
      'description' => $info['description'],
      'field types' => array('vote_up_down'),
      'settings' => array(),
    );
  }

  return $widgets;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function vote_up_down_field_formatter_info() {
  return array(
    'vote_up_down' => array(
      'label' => t('Vote up down'),
      'field types' => array('vote_up_down'),
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * Declaring themes for plugins.
 */
function vote_up_down_theme() {
  ctools_include('plugins');
  $widgets = ctools_get_plugins('vote_up_down', 'widgets');

  $theme = array();

  foreach ($widgets as $widget => $info) {
    $theme['vote_up_down_' . $widget] = array(
      'template' => 'widget',
      'path' => $info['path'],
      'preprocess functions' => array('vote_up_down_widget_preprocess'),

      'variables' => array(
        'widget' => $widget,
        'entity_id' => NULL,
        'entity_type' => NULL,
      ),
    );
  }

  return $theme;
}

/**
 * Implementation of hook_permission().
 */
function vud_permission() {
  return array(
    'use vote up/down' => array(
      'title' => t('Use Vote Up/Down'),
      'description' => t('Grant users the ability to cast votes'),
    ),
    'administer vote up/down' => array(
      'title' => t('Administer Vote Up/Down'),
      'description' => t('Adjust the settings of the Vote Up/Down module'),
    ),
    'access vote up/down statistics' => array(
      'title' => t('Access Vote Up/Down Statistics'),
      'description' => t('Permission to see who is voting on what'),
    ),
    'reset vote up/down votes' => array(
      'title' => t('Reset Votes'),
      'description' => t('Reset all of the Up/Down votes on the site'),
    ),
  );
}

/**
 * Access callback for votes.
 *
 * @param $permission
 *  A string containing the permission required to modify the vote.
 * @param $entity_type
 *  A string containing the type of content being voted on.
 * @param $entity_id
 *  An integer containing the unique ID of the content being voted on.
 * @param $value
 *  An integer containing the vote value, 1 for an up vote, -1 for a down vote.
 * @param $tag
 *  A string containing the voting API tag.
 * @param $account
 *  An object containing the user voting on the content, NULL for the current
 *  user.
 *
 * @return bool
 *  Boolean flagging whether or not the user has access to the vote.
 */
function vote_up_down_access_callback($permission, $entity_type, $entity_id, $value, $tag, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // Verify the user has the proper permission.
  if (user_access($permission, $account) !== TRUE) {
    return FALSE;
  }

  // Although the user holds the proper permission we should allow other module
  // to interrupt during the access function.
  $access_array = module_invoke_all('vud_access', $permission, $entity_type, $entity_id, $value, $tag, $account);

  foreach ($access_array as $access_result) {
    if ($access_result !== TRUE) {
      // One of the module didn't allow this action.
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Pre process function callback.
 */
function vote_up_down_widget_preprocess(&$variables) {
  $widget = vote_up_down_load_widget($variables['widget']);

  // Get all the assets.
  $css = $widget->settings['assets']['css'];
  $js = $widget->settings['assets']['js'];

  // Load tje CSS.
  foreach ($css as $asset) {
    drupal_add_css($widget->settings['path'] . '/' . $asset);
  }

  // Loading JS.
  foreach ($js as $asset) {
    drupal_add_js($widget->settings['path'] . '/' . $asset);
  }

  // Invoking the pre process of the widget.
  $widget->preprocess($variables);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function vote_up_down_ctools_plugin_api($module, $api) {
  if ($module == 'vote_up_down' && $api == 'widgets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function vote_up_down_ctools_plugin_type() {
  $plugins['widgets'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function vote_up_down_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'vote_up_down' && $plugin_type == 'widgets') {
    return 'plugins/widgets';
  }
}

/**
 * Get the widget class.
 *
 * @param $widget
 *  The name of the widget.
 *
 * @throws Exception
 * @return voteUpDownBase
 */
function vote_up_down_load_widget($widget) {
  $object_cache = drupal_static(__FUNCTION__);

  if (!isset($object_cache[$widget])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('vote_up_down', 'widgets', $widget);
    $class = ctools_plugin_load_class('vote_up_down', 'widgets', $widget, 'class');

    if (!$class) {
      throw new Exception(t('The @widget class id undefined', array('@widget' => $plugin['class'])));
    }

    $object_cache[$widget] = new $class($plugin);
  }

  return $object_cache[$widget];
}

/**
 * Implements hook_field_instance_settings_form().
 */
function vote_up_down_field_instance_settings_form($field, $instance) {
  return vote_up_down_load_widget($instance['widget']['type'])->instanceSettings($instance['settings']);
}

/**
 * Implements hook_field_widget_form().
 */
function vote_up_down_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return vote_up_down_load_widget($instance['widget']['type'])->widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_view().
 */
function vote_up_down_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return vote_up_down_load_widget($instance['widget']['type'])->view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_field_prepare_view().
 */
function vote_up_down_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][0] = $entity;
    }
  }
}